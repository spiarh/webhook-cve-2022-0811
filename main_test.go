package main

import (
	"context"
	"encoding/json"
	"testing"

	admissionv1 "k8s.io/api/admission/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"sigs.k8s.io/controller-runtime/pkg/webhook/admission"
)

func TestHandle(t *testing.T) {
	pod := &corev1.Pod{
		TypeMeta: metav1.TypeMeta{
			Kind:       "Pod",
			APIVersion: "v1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      "pod",
			Namespace: "default",
		},
		Spec: corev1.PodSpec{
			Containers: []corev1.Container{
				{
					Name:  "container",
					Image: "image:malicious",
				},
			},
		},
	}

	var tests = []struct {
		name            string
		securityContext *corev1.PodSecurityContext
		allowed         bool
		message         string
	}{
		{
			name: "Pod with a plus char in sysctl values",
			securityContext: &corev1.PodSecurityContext{
				Sysctls: []corev1.Sysctl{
					{
						Name:  "name",
						Value: "val+",
					},
				},
			},
			allowed: false,
			message: "Usage of + in sysctl value is forbidden: name=name, value=val+",
		},
		{
			name: "Pod with an equal char in sysctl values",
			securityContext: &corev1.PodSecurityContext{
				Sysctls: []corev1.Sysctl{
					{
						Name:  "name",
						Value: "val=",
					},
				},
			},
			allowed: false,
			message: "Usage of = in sysctl value is forbidden: name=name, value=val=",
		},
		{
			name:            "Pod without SecurityContext ",
			securityContext: nil,
			allowed:         true,
			message:         "",
		},
		{
			name: "Pod without special char in sysctl values",
			securityContext: &corev1.PodSecurityContext{
				Sysctls: []corev1.Sysctl{
					{
						Name:  "name",
						Value: "val",
					},
				},
			},
			allowed: true,
			message: "",
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			schema := runtime.NewScheme()
			decoder, _ := admission.NewDecoder(schema)
			v := &podValidator{decoder: decoder}

			req := admission.Request{
				AdmissionRequest: admissionv1.AdmissionRequest{
					Object: runtime.RawExtension{
						Raw: func() []byte {
							pod.Spec.SecurityContext = tt.securityContext
							p, err := json.Marshal(pod)
							if err != nil {
								t.Error(err)
							}

							return p
						}(),
					},
				},
			}

			resp := v.Handle(context.TODO(), req)
			if tt.allowed != resp.AdmissionResponse.Allowed {
				t.Errorf("Expected %t, got %t", tt.allowed, resp.AdmissionResponse.Allowed)
			}
			if tt.message != string(resp.AdmissionResponse.Result.Reason) {
				t.Errorf("Expected %s, got %s", tt.message, resp.AdmissionResponse.Result.Reason)
			}
		})
	}
}
